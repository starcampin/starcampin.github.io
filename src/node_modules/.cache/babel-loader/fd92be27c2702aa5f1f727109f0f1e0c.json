{"ast":null,"code":"import audioURL from \"../media/Leapfrog.ogg\";\nimport Swal from \"sweetalert2\";\nexport function getIdName(id) {\n  return id.substring(0, id.lastIndexOf(\" \"));\n}\nexport function playAudio(id) {\n  Swal.close();\n  let audio = new Audio(audioURL);\n  audio.loop = true;\n  audio.play();\n  Swal.fire({\n    title: `${getIdName(id)}'s off`,\n    icon: \"warning\"\n  }).then(() => {\n    audio.loop = false;\n    audio.pause();\n  });\n}\n/**\n * @param {Date} input - current value of TimePicker Component\n * @param {boolean} onlySeconds - if true, parseTime return time in seconds\n * @returns {Date|number}\n */\n\nexport function parseTime(input, onlySeconds) {\n  if (!input || input === null) return getMidNight();\n  let time = new Date();\n  let durationSeconds = input.getHours() * 60 ** 2 + input.getMinutes() * 60 + input.getSeconds();\n  if (onlySeconds) return durationSeconds; // if the timer is set to 00:00:00\n\n  if (!durationSeconds) return null;\n  time.setSeconds(time.getSeconds() + durationSeconds);\n  return time;\n}\n\nfunction getMidNight() {\n  // workaround to get 00:00:00 at timer's creation\n  const time = new Date();\n  time.setHours(0, 0, 0, 0);\n  return time;\n}\n\nexport function getInputStorage(id) {\n  let inputStorage = localStorage.getItem(`input ${id}`);\n\n  if (inputStorage === \"null\" || !inputStorage) {\n    return getMidNight();\n  }\n\n  return new Date(JSON.parse(inputStorage.toString()));\n}","map":{"version":3,"sources":["/home/kishan/camp/react-timer-app/src/components/utils.js"],"names":["audioURL","Swal","getIdName","id","substring","lastIndexOf","playAudio","close","audio","Audio","loop","play","fire","title","icon","then","pause","parseTime","input","onlySeconds","getMidNight","time","Date","durationSeconds","getHours","getMinutes","getSeconds","setSeconds","setHours","getInputStorage","inputStorage","localStorage","getItem","JSON","parse","toString"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,uBAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,SAASC,SAAT,CAAmBC,EAAnB,EAAuB;AAC5B,SAAOA,EAAE,CAACC,SAAH,CAAa,CAAb,EAAgBD,EAAE,CAACE,WAAH,CAAe,GAAf,CAAhB,CAAP;AACD;AAED,OAAO,SAASC,SAAT,CAAmBH,EAAnB,EAAuB;AAC5BF,EAAAA,IAAI,CAACM,KAAL;AACA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUT,QAAV,CAAZ;AACAQ,EAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACAF,EAAAA,KAAK,CAACG,IAAN;AACAV,EAAAA,IAAI,CAACW,IAAL,CAAU;AAAEC,IAAAA,KAAK,EAAG,GAAEX,SAAS,CAACC,EAAD,CAAK,QAA1B;AAAmCW,IAAAA,IAAI,EAAE;AAAzC,GAAV,EAAgEC,IAAhE,CAAqE,MAAM;AACzEP,IAAAA,KAAK,CAACE,IAAN,GAAa,KAAb;AACAF,IAAAA,KAAK,CAACQ,KAAN;AACD,GAHD;AAID;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,WAA1B,EAAuC;AAC5C,MAAI,CAACD,KAAD,IAAUA,KAAK,KAAK,IAAxB,EAA8B,OAAOE,WAAW,EAAlB;AAC9B,MAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,MAAIC,eAAe,GACjBL,KAAK,CAACM,QAAN,KAAmB,MAAM,CAAzB,GAA6BN,KAAK,CAACO,UAAN,KAAqB,EAAlD,GAAuDP,KAAK,CAACQ,UAAN,EADzD;AAEA,MAAIP,WAAJ,EAAiB,OAAOI,eAAP,CAL2B,CAM5C;;AACA,MAAI,CAACA,eAAL,EAAsB,OAAO,IAAP;AACtBF,EAAAA,IAAI,CAACM,UAAL,CAAgBN,IAAI,CAACK,UAAL,KAAoBH,eAApC;AACA,SAAOF,IAAP;AACD;;AAED,SAASD,WAAT,GAAuB;AACrB;AACA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACAD,EAAAA,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,SAAOP,IAAP;AACD;;AAED,OAAO,SAASQ,eAAT,CAAyB1B,EAAzB,EAA6B;AAClC,MAAI2B,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAsB,SAAQ7B,EAAG,EAAjC,CAAnB;;AACA,MAAI2B,YAAY,KAAK,MAAjB,IAA2B,CAACA,YAAhC,EAA8C;AAC5C,WAAOV,WAAW,EAAlB;AACD;;AACD,SAAO,IAAIE,IAAJ,CAASW,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACK,QAAb,EAAX,CAAT,CAAP;AACD","sourcesContent":["import audioURL from \"../media/Leapfrog.ogg\";\nimport Swal from \"sweetalert2\";\n\nexport function getIdName(id) {\n  return id.substring(0, id.lastIndexOf(\" \"));\n}\n\nexport function playAudio(id) {\n  Swal.close();\n  let audio = new Audio(audioURL);\n  audio.loop = true;\n  audio.play();\n  Swal.fire({ title: `${getIdName(id)}'s off`, icon: \"warning\" }).then(() => {\n    audio.loop = false;\n    audio.pause();\n  });\n}\n\n/**\n * @param {Date} input - current value of TimePicker Component\n * @param {boolean} onlySeconds - if true, parseTime return time in seconds\n * @returns {Date|number}\n */\nexport function parseTime(input, onlySeconds) {\n  if (!input || input === null) return getMidNight();\n  let time = new Date();\n  let durationSeconds =\n    input.getHours() * 60 ** 2 + input.getMinutes() * 60 + input.getSeconds();\n  if (onlySeconds) return durationSeconds;\n  // if the timer is set to 00:00:00\n  if (!durationSeconds) return null;\n  time.setSeconds(time.getSeconds() + durationSeconds);\n  return time;\n}\n\nfunction getMidNight() {\n  // workaround to get 00:00:00 at timer's creation\n  const time = new Date();\n  time.setHours(0, 0, 0, 0);\n  return time;\n}\n\nexport function getInputStorage(id) {\n  let inputStorage = localStorage.getItem(`input ${id}`);\n  if (inputStorage === \"null\" || !inputStorage) {\n    return getMidNight();\n  }\n  return new Date(JSON.parse(inputStorage.toString()));\n}\n"]},"metadata":{},"sourceType":"module"}