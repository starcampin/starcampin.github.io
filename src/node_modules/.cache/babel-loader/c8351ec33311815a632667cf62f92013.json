{"ast":null,"code":"var _jsxFileName = \"/home/kishan/camp/react-timer-app/src/components/SingleTimer/FullTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useTimer } from \"react-timer-hook\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport TitleBar from \"./TitleBar\";\nimport TimeButtons from \"./TimeButtons\";\nimport * as utils from \"../utils\";\nimport \"../../index.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FullTimer(props) {\n  _s();\n\n  let {\n    expiryTimestamp,\n    updateTimeoutSeconds,\n    removeTimer,\n    id,\n    isHidden\n  } = props;\n  const {\n    seconds,\n    minutes,\n    hours,\n    isRunning,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    autoStart: true,\n    expiryTimestamp,\n    onExpire: () => {\n      let time = utils.parseTime(input);\n      restart(time);\n      pause();\n      utils.playAudio(id);\n    }\n  });\n  const clockValues = [hours, minutes, seconds];\n  const [input, setInput] = useState(utils.getInputStorage(id));\n  useEffect(() => {\n    localStorage.setItem(`input ${id}`, JSON.stringify(input));\n    updateTimeoutSeconds(utils.parseTime(input, true));\n    let time = utils.parseTime(input);\n    restart(time);\n    pause(); // eslint-disable-next-line\n  }, [input]);\n  if (isHidden) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n  function TimerBody() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actual-timer\",\n        children: clockValues.map((item, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: item < 10 ? `0${item}` : item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), index === clockValues.length - 1 ? \"\" : \":\"]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimeButtons, {\n        pause: () => pause(),\n        resume: () => resume(),\n        restart: time => restart(time),\n        isRunning: () => isRunning,\n        clockValues: () => clockValues,\n        input: () => input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      id: id,\n      removeTimer: removeTimer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n      dateAdapter: AdapterDateFns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerBody, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FullTimer, \"FuuBfjWdsA8JeTA6QpLLsWqePtc=\", false, function () {\n  return [useTimer];\n});\n\n_c = FullTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FullTimer\");","map":{"version":3,"sources":["/home/kishan/camp/react-timer-app/src/components/SingleTimer/FullTimer.js"],"names":["React","useState","useEffect","useTimer","AdapterDateFns","LocalizationProvider","TitleBar","TimeButtons","utils","FullTimer","props","expiryTimestamp","updateTimeoutSeconds","removeTimer","id","isHidden","seconds","minutes","hours","isRunning","pause","resume","restart","autoStart","onExpire","time","parseTime","input","playAudio","clockValues","setInput","getInputStorage","localStorage","setItem","JSON","stringify","TimerBody","map","item","index","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTimer } from \"react-timer-hook\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport TitleBar from \"./TitleBar\";\nimport TimeButtons from \"./TimeButtons\";\nimport * as utils from \"../utils\";\nimport \"../../index.css\";\n\nexport default function FullTimer(props) {\n  let { expiryTimestamp, updateTimeoutSeconds, removeTimer, id, isHidden } =\n    props;\n\n  const { seconds, minutes, hours, isRunning, pause, resume, restart } =\n    useTimer({\n      autoStart: true,\n      expiryTimestamp,\n      onExpire: () => {\n        let time = utils.parseTime(input);\n        restart(time);\n        pause();\n        utils.playAudio(id);\n      },\n    });\n\n  const clockValues = [hours, minutes, seconds];\n\n  const [input, setInput] = useState(utils.getInputStorage(id));\n\n  useEffect(() => {\n    localStorage.setItem(`input ${id}`, JSON.stringify(input));\n    updateTimeoutSeconds(utils.parseTime(input, true));\n    let time = utils.parseTime(input);\n    restart(time);\n    pause();\n    // eslint-disable-next-line\n  }, [input]);\n\n  if (isHidden) return <></>;\n\n  function TimerBody() {\n    return (\n      <div className=\"clock buttons\">\n        <div className=\"actual-timer\">\n          {clockValues.map((item, index) => (\n            <>\n              <div>{item < 10 ? `0${item}` : item}</div>\n              {index === clockValues.length - 1 ? \"\" : \":\"}\n            </>\n          ))}\n        </div>\n        <TimeButtons\n          pause={() => pause()}\n          resume={() => resume()}\n          restart={(time) => restart(time)}\n          isRunning={() => isRunning}\n          clockValues={() => clockValues}\n          input={() => input}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <section className=\"wrapper\">\n      <TitleBar id={id} removeTimer={removeTimer} />\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n\n      </LocalizationProvider>\n      <TimerBody />\n      <hr />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}